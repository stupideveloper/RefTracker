// src/internal/request.ts
function n(e) {
  let r, o, a, t = {};
  for ([r, o] of e)
    t[r] = (a = t[r]) !== void 0 ? [].concat(a, o) : o;
  return t;
}
async function i(e, r) {
  if (!(!e.body || !r))
    return ~r.indexOf("application/json") ? e.json() : ~r.indexOf("multipart/form-data") || ~r.indexOf("application/x-www-form-urlencoded") ? e.formData().then(n) : ~r.indexOf("text/") ? e.text() : e.arrayBuffer();
}

// src/request.ts
function f(e) {
  let {request: r, waitUntil: o} = e, a = new URL(r.url), t = this;
  return t.url = r.url, t.method = r.method, t.headers = r.headers, t.extend = o, t.cf = r.cf, t.params = {}, t.path = a.pathname, t.hostname = a.hostname, t.origin = a.origin, t.query = a.searchParams, t.search = a.search, t.body = i.bind(0, r, t.headers.get("content-type")), t.body.blob = r.blob.bind(r), t.body.text = r.text.bind(r), t.body.arrayBuffer = r.arrayBuffer.bind(r), t.body.formData = r.formData.bind(r), t.body.json = r.json.bind(r), t;
}
export {
  f as ServerRequest
};
